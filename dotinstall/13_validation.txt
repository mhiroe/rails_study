#
# 14. validationを設定しよう
#

入力された内容が空でも入力できる
　→入力ルールを設定して弾く

# app/models/project.rb

class Project < ActiveRecord::Base
  # 入力フォームのバリデーションを設定
  # - タイトルが空だったらNG presence(存在するかどうか)
  validates :title, presence: true
end

# エラーの場合、入力フォームに戻す
# app/controllers/projects_controllers.rb

  def create
    # フォームから渡されたものを入れる
    # - project_paramsメソッドで得たデータを引数とする
    @project = Project.new(project_params)
    # 保存
    if @project.save
    # リダイレクト(遷移)する　プロジェクト一覧へ
      redirect_to projects_path
    else
      # validationでfalseが返った場合、newのビューに戻す
      render 'new'
    end
  end

  ＃
  ＃ 15.エラーメッセージを表示する
  ＃

  バリデーションエラーを表示する
  # app/view/new.html.erb

  <!--エラーとなった場合projectt.errorに何かが入る-->
  <% if @project.errors.any? %>
      <!--project.errorsに何が入っているか調べる-->
       <!-- [キー=>配列] [切り分け] @messages-[title=>["can't be blank"]が入っている -->
    <!--<%= @project.errors.inspect %>-->
      <!--message配列のtitleのキーの0番目の要素を取り出す-->
      <%= @project.errors.messages[:title][0] %>
  <% end %>

  デフォルトメッセージを変える
 # app/models/project.rb

  # validationエラーメッセージを変更する
    # validationエラーメッセージを変更する
    validates :title,
              presence: { message: "入力してください" },
              length: {minimum: 3, message: "３文字以上"}
